/**
 * (c) Klemens Jahrmann
 * klemens.jahrmann@net1220.at
 */

#version 430

layout(vertices = 3) out;

uniform vec3 camPos;
uniform float minTessLevel;
uniform float maxTessLevel;
uniform float maxDistance;
uniform float minDistance;

in vec4 vPosition[];
in vec3 vNormal[];
in vec2 vUv[];
in vec3 vTangent[];
in vec3 vBitangent[];

out vec4 tcPosition[];
out vec3 tcNormal[];
out vec2 tcUv[];
out vec3 tcTangent[];
out vec3 tcBitangent[];

void main()
{
	tcPosition[gl_InvocationID] = vPosition[gl_InvocationID];
	tcNormal[gl_InvocationID] = vNormal[gl_InvocationID];
	tcUv[gl_InvocationID] = vUv[gl_InvocationID];
	tcTangent[gl_InvocationID] = vTangent[gl_InvocationID];
	tcBitangent[gl_InvocationID] = vBitangent[gl_InvocationID];

	if(gl_InvocationID == 0)
	{
		float d0 = distance(vPosition[0].xyz,camPos);
		float d1 = distance(vPosition[1].xyz,camPos);
		float d2 = distance(vPosition[2].xyz,camPos);
		float d = min(d0, min(d1, d2));

		float level = minTessLevel + (maxTessLevel - minTessLevel) * (1.0f - clamp((d - minDistance) / (maxDistance - minDistance), 0.0f, 1.0f));

		gl_TessLevelInner[0] = level;
		gl_TessLevelOuter[0] = level;
		gl_TessLevelOuter[1] = level;
		gl_TessLevelOuter[2] = level;
	}
}